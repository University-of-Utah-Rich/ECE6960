#include <Arduino.h>

// colorwheel demo for Adafruit RGBmatrixPanel library.
// Renders a nice circle of hues on our 32x32 RGB LED matrix:
// http://www.adafruit.com/products/607
// 32x32 MATRICES DO NOT WORK WITH ARDUINO UNO or METRO 328.

// Written by Limor Fried/Ladyada & Phil Burgess/PaintYourDragon
// for Adafruit Industries.
// BSD license, all text above must be included in any redistribution.

#include <RGBmatrixPanel.h>

// Most of the signal pins are configurable, but the CLK pin has some
// special constraints.  On 8-bit AVR boards it must be on PORTB...
// Pin 11 works on the Arduino Mega.  On 32-bit SAMD boards it must be
// on the same PORT as the RGB data pins (D2-D7)...
// Pin 8 works on the Adafruit Metro M0 or Arduino Zero,
// Pin A4 works on the Adafruit Metro M4 (if using the Adafruit RGB
// Matrix Shield, cut trace between CLK pads and run a wire to A4).

#define CLK 8 // USE THIS ON ADAFRUIT METRO M0, etc.
// #define CLK A4 // USE THIS ON METRO M4 (not M0)
// #define CLK 11 // USE THIS ON ARDUINO MEGA
#define OE 9
#define LAT 10
#define A A0
#define B A1
#define C A2
#define D A3

RGBmatrixPanel matrix(A, B, C, D, CLK, LAT, OE, false);

void setup() {
  matrix.begin();
  matrix.setTextWrap(false);
  matrix.fillScreen(matrix.Color888(64, 64, 64)); // white background
}

void loop() {
  for (int x = 0; x < 32; x++) {
    for (int y = 0; y < 32; y++) {
      if (x >= 2 && x <= 29 && y >= 2 &&
          y <= 29) // only fill the inside 28 blue pixels
      {
        matrix.drawPixel(x, y, matrix.Color888(64, 0, 0)); // blue pixel
      }
    }
  }
}

// #include <Arduino.h>
// #include <RGBmatrixPanel.h>

// // Most of the signal pins are configurable, but the CLK pin has some
// // special constraints.  On 8-bit AVR boards it must be on PORTB...
// // Pin 11 works on the Arduino Mega.  On 32-bit SAMD boards it must be
// // on the same PORT as the RGB data pins (D2-D7)...
// // Pin 8 works on the Adafruit Metro M0 or Arduino Zero,
// // Pin A4 works on the Adafruit Metro M4 (if using the Adafruit RGB
// // Matrix Shield, cut trace between CLK pads and run a wire to A4).

// #define CLK 8 // USE THIS ON ADAFRUIT METRO M0, etc.
// // #define CLK A4 // USE THIS ON METRO M4 (not M0)
// // #define CLK 11 // USE THIS ON ARDUINO MEGA
// #define OE 9
// #define LAT 10
// #define A A0
// #define B A1
// #define C A2
// #define D A3

// RGBmatrixPanel matrix(A, B, C, D, CLK, LAT, OE, false);

// const uint8_t IMAGE_WIDTH = 32;
// const uint8_t IMAGE_HEIGHT = 32;
// const uint32_t BAUD_RATE = 9600;

// uint8_t imageData[IMAGE_WIDTH * IMAGE_HEIGHT];
// uint16_t startPacket;
// uint16_t endPacket;
// uint16_t checksum;

// void displayImage(uint8_t *img) {
//   // Iterate over the rows of the LED matrix
//   for (int y = 0; y < IMAGE_HEIGHT; y++) {
//     // Iterate over the columns of the LED matrix
//     for (int x = 0; x < IMAGE_WIDTH; x++) {
//       // Calculate the index of the pixel in the img array
//       int index = (y * IMAGE_HEIGHT) + x;
//       // Get the color of the pixel from the img array
//       uint32_t color = img[index];
//       // Set the color of the corresponding pixel on the LED matrix
//       matrix.drawPixel(x, y, color);
//     }
//   }
// }

// void setup() { Serial.begin(BAUD_RATE); }

// void loop() {
//   if (Serial.available() >= (IMAGE_WIDTH * IMAGE_HEIGHT + 2 + 2 + 2)) {
//     // Read the start packet
//     startPacket = Serial.read();
//     startPacket |= Serial.read() << 8;

//     // Read the image data
//     for (int i = 0; i < IMAGE_WIDTH * IMAGE_HEIGHT; i++) {
//       imageData[i] = Serial.read();
//     }

//     // Read the end packet
//     endPacket = Serial.read();
//     endPacket |= Serial.read() << 8;

//     // Read the checksum
//     checksum = Serial.read();
//     checksum |= Serial.read() << 8;

//     // Verify the checksum
//     uint16_t calculatedChecksum = startPacket;
//     for (int i = 0; i < IMAGE_WIDTH * IMAGE_HEIGHT; i++) {
//       calculatedChecksum += imageData[i];
//     }
//     calculatedChecksum += endPacket;

//     if (calculatedChecksum == checksum) {
//       // The image data is valid, display it
//       displayImage(imageData);
//     }
//   }
// }
